{"version":3,"file":"static/js/199.227bb8ff.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-network/./src/components/Dialogs/DialogItem/DialogsItem.module.css?ac9e","components/Dialogs/DialogItem/DialogsItem.tsx","webpack://social-network/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Dialogs_container__7eEPz\",\"dialogs\":\"Dialogs_dialogs__Uc6Qe\",\"dialogsItems\":\"Dialogs_dialogsItems__BCJK6\",\"messages\":\"Dialogs_messages__7OJg7\",\"inputContainer\":\"Dialogs_inputContainer__1poqA\",\"input\":\"Dialogs_input__IQY6v\",\"sendButton\":\"Dialogs_sendButton__u-7hg\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogsItem_dialog__6LPyW\",\"active\":\"DialogsItem_active__Wr9KA\"};","import React from 'react';\r\nimport s from './DialogsItem.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nfunction DialogItem(props: DialogsItemType) {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <NavLink className={s.dialog} to={path} activeClassName={s.active}>\r\n            {props.name}\r\n        </NavLink>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__tt-kn\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nfunction Message(props: MessageType) {\r\n    return (\r\n        <div>\r\n            <span className={s.message}>{props.message}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport Button from '../../common/Button/Button';\r\nimport s from '../Dialogs.module.css'\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={s.input}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength50]}\r\n                    name=\"newMessageBody\"\r\n                    placeholder=\"Enter your message\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button type={'submit'}\r\n                        className={s.sendButton}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport AddMessageForm, {FormDataType} from './AddMessageForm/AddMessageForm';\r\n\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n    const state = props.dialogsPage\r\n\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    const messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    const addNewMessageChange = (values: FormDataType) => {\r\n        props.onSendMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div className={s.inputContainer}>\r\n                    <AddMessageForm onSubmit={addNewMessageChange}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from '../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React, {ComponentType} from 'react';\r\nimport {DialogsPageType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport {connect} from 'react-redux';\r\nimport Dialogs from './Dialogs';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {RootStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype mapDispatchPropsType = {\r\n    onSendMessage: (newMessageBody: string) => void\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\nexport type DialogsPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        onSendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldsProps} from 'redux-form';\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field';\r\n\r\n\r\ntype FormsControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={hasError ? styles.formControlError : ''}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    // @ts-ignore\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    // @ts-ignore\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string = '', name: string, validators: Array<any>, component: any, props = {}, text: string = '', wrapperClass: any, fieldClass: any) => (\r\n    <div className={wrapperClass}>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n               className={fieldClass}\r\n        />\r\n        {text}\r\n    </div>\r\n)","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControlError\":\"FormsControls_formControlError__qwwm7\",\"formSummaryError\":\"FormsControls_formSummaryError__vFhQG\"};"],"names":["props","path","id","className","s","to","activeClassName","name","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Button","type","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","onSendMessage","newMessageBody","mapStateToProps","isAuth","auth","compose","connect","dispatch","sendMessageAC","Component","restProps","Dialogs","FormControl","meta","touched","error","children","hasError","styles","input","Input","createField","validators","text","wrapperClass","fieldClass","value","maxLength","length"],"sourceRoot":""}
{"version":3,"file":"static/js/877.b074cc8a.chunk.js","mappings":"2OACA,EAAyB,4BAAzB,EAAuE,qCAAvE,EAAgI,uCAAhI,EAA2L,uCAA3L,EAAqP,sCAArP,EAA2S,mCAA3S,EAAgW,qCAAhW,EAAgZ,8BAAhZ,EAA6b,kCAA7b,EAA+e,mCAA/e,EAAoiB,qCAApiB,EAAulB,iCAAvlB,EAA4oB,uCAA5oB,EAAgsB,gCAAhsB,EAA2vB,8CAA3vB,EAAqzB,+BAArzB,EAAs2B,qC,oBCAt2B,EAAyB,8BAAzB,EAAoE,kC,SCevDA,EAAb,gMAEIC,MAAQ,CACJC,UAAU,EACVC,OAAQ,EAAKC,MAAMD,OACnBE,QAAS,EAAKD,MAAMC,SAL5B,EAQIC,iBAAmB,WACf,EAAKC,SAAS,CACVL,UAAU,KAVtB,EAcIM,mBAAqB,WACjB,EAAKD,SAAS,CACVL,UAAU,IAEd,EAAKE,MAAMK,aAAa,EAAKR,MAAME,SAlB3C,EAoBIO,eAAiB,SAACC,GACd,EAAKJ,SAAS,CACVJ,OAAQQ,EAAEC,cAAcC,SAtBpC,mDA0BI,SAAmBC,EAA6CC,GAExDD,EAAUX,SAAWa,KAAKZ,MAAMD,QAChCa,KAAKT,SAAS,CACVJ,OAAQa,KAAKZ,MAAMD,WA9BnC,oBAmCI,WACI,OAAO,yBACDa,KAAKf,MAAMC,UAOT,0BACI,kBAAOe,WAAS,EACTC,SAAUF,KAAKN,eACfS,OAAQH,KAAKR,mBACbK,MAAOG,KAAKf,MAAME,OAClBiB,UAAWC,OAXtB,0BACI,iBAAMD,UAAWC,EACXC,QAASN,KAAKV,iBADpB,SACuCU,KAAKZ,MAAMD,QAAU,8BAxChF,GAAmCoB,EAAAA,W,uCC0CnC,GAHiCC,EAAAA,EAAAA,GAChC,CAACC,KAAM,gBADyBD,EA1C7B,SAAC,GAAoC,IAAnCE,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MACrB,OAAO,kBAAMC,SAAUH,EAAcN,UAAWC,EAAzC,WACH,4BACI,0BACI,SAACS,EAAA,EAAD,CAAQC,KAAM,SAAUX,UAAWC,EAAnC,yBAIHO,IAAS,gBAAKR,UAAWY,EAAAA,EAAAA,iBAAhB,SACLJ,KAGL,iBAAKR,UAAWC,EAAhB,WACI,iBAAMD,UAAWC,EAAjB,0BACCY,EAAAA,EAAAA,IAAY,YAAa,WAAY,GAAIC,EAAAA,GAAO,GAAI,GAAI,GAAIb,OAEjE,iBAAKD,UAAWC,EAAhB,WACI,iBAAMD,UAAWC,EAAjB,kCACA,gBAAKD,UAAWC,EAAhB,UACKY,EAAAA,EAAAA,IAAY,GAAI,iBAAkB,GAAIC,EAAAA,GAAO,CAACH,KAAM,YAAa,GAAI,GAAI,UAGlF,4BACI,iBAAMX,UAAWC,EAAjB,uBACCY,EAAAA,EAAAA,IAAY,SAAU,4BAA6B,GAAIE,EAAAA,GAAU,GAAI,GAAI,GAAId,OAElF,4BACI,iBAAMD,UAAWC,EAAjB,yBACCY,EAAAA,EAAAA,IAAY,WAAY,UAAW,GAAIE,EAAAA,GAAU,GAAI,GAAI,GAAId,UAGtE,4BACI,iBAAMD,UAAWC,EAAjB,sBACCe,OAAOC,KAAKV,EAAQW,UAAUC,KAAI,SAAAC,GAC/B,OAAO,4BACF,iBAAMpB,UAAWC,EAAjB,SAAkCmB,IADhC,MAC+CP,EAAAA,EAAAA,IAAYO,EAAD,mBAAkBA,GAAO,GAAIN,EAAAA,GAAO,GAAI,GAAI,GAAIb,KADhGmB,eCrC/BC,EAAiC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACnD,OAAO,iBAAKvB,UAAWC,EAAhB,UACFqB,EADE,KACcC,MAuCzB,EA7BoD,SAAC,GAAwC,IAAvChB,EAAsC,EAAtCA,QAAStB,EAA6B,EAA7BA,QAASuC,EAAoB,EAApBA,eACpE,OAAO,iBAAKxB,UAAWC,EAAhB,UACFhB,IAAW,0BACR,SAACyB,EAAA,EAAD,CAAQR,QAASsB,EAAgBxB,UAAWC,EAA5C,0BAIJ,gBAAKD,UAAWC,EAAhB,SAA6BM,EAAQkB,SAAWlB,EAAQkB,SAAW,2BACnE,iBAAKzB,UAAWC,EAAhB,gCAAoDM,EAAQmB,eAAiB,MAAQ,QACpFnB,EAAQoB,4BACL,iBAAK3B,UAAWC,EAAhB,qBAAyCM,EAAQoB,6BACpDpB,EAAQqB,UAAW,iBAAK5B,UAAWC,EAAhB,uBAA2CM,EAAQqB,YAElEZ,OAAOC,KAAKV,EAAQW,UAAUC,KAAI,SAAAC,GAAQ,OAAOb,EAAQW,SAASE,MAC9DS,OAAM,SAAAC,GAAE,OAAW,OAAPA,OACjB,4BACI,iBAAM9B,UAAWC,EAAjB,wBACCe,OAAOC,KAAKV,EAAQW,UAAUC,KAAI,SAAAC,GAC/B,OAAOb,EAAQW,SAASE,IAClB,SAACC,EAAD,CACSC,aAAcF,EACdG,aAAchB,EAAQW,SAASE,IAF1BA,GAGd,eC6C1B,EAvE2D,SAAC,GAOO,IANHb,EAME,EANFA,QACAtB,EAKE,EALFA,QACAF,EAIE,EAJFA,OACAM,EAGE,EAHFA,aACA0C,EAEE,EAFFA,UACAC,EACE,EADFA,YAE5D,GAA8BC,EAAAA,EAAAA,WAAkB,GAAhD,eAAKnD,EAAL,KAAeoD,EAAf,KAEA,IAAK3B,EACD,OAAO,SAAC4B,EAAA,EAAD,IAgBX,OACI,0BACI,iBAAKnC,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,gBACID,UAAWC,EACXmC,IAAK7B,EAAQ8B,OAAOC,OAASC,EAC7BC,IAAKjC,EAAQkB,SAAW,iBAGxBxC,IACA,iBAAKe,UAAWC,EAAhB,WACI,kBAAOU,KAAK,OACL8B,KAAK,OACLC,GAAG,OACH1C,UAAWC,EACXH,SA7BH,SAACP,GAAsC,IAAD,EAC/B,KAA3B,UAAAA,EAAEoD,OAAOC,aAAT,eAAgBC,SAChBd,EAAUxC,EAAEoD,OAAOC,MAAM,QA4BT,kBAAOE,QAAQ,OAAf,kCAIZ,iBAAK9C,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,SAACrB,EAAD,CAAeG,OAAQA,EACRM,aAAcA,EACdJ,QAASA,MAG3BH,GACK,SAAC,EAAD,CAA0B2B,SApC/B,SAACF,GACdyB,EAAYzB,GACPwC,MAAK,WACFb,GAAY,OAkCwB3B,QAASA,EACTyC,cAAezC,KAEzC,SAAC,EAAD,CAAaA,QAASA,EACTtB,QAASA,EACTuC,eAAgB,kBAAMU,GAAY,e,kBC/EzE,EAAiC,gCAAjC,EAAgF,8BAAhF,EAA+H,gCAA/H,EAAoL,oCAApL,EAAsO,6BCAtO,EAAuB,mBAAvB,EAAmD,qBAAnD,EAAoF,wBAApF,EAA0H,0BAA1H,EAAmK,2BAAnK,EAA2M,yBCwB3M,GAhBa,SAAClD,GACV,OACI,iBAAKgB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,gBAAKmC,IAAKG,EACLC,IAAI,mBAEb,iBAAKxC,UAAWC,EAAhB,WACI,cAAGD,UAAWC,EAAd,SAA8BjB,EAAMiE,WACpC,gBAAKjD,UAAWC,EAAhB,UACI,uCAAa,iBAAMD,UAAWC,EAAjB,SAAgCjB,EAAMkE,yB,sBCVjEC,GAAUhD,EAAAA,MAAW,SAACnB,GACxB,IAAMoE,GAAgB,OAAIpE,EAAMqE,OAAOC,UAAUnC,KAAI,SAAAoC,GAAC,OAAI,SAAC,GAAD,CAAMN,QAASM,EAAEN,QAASC,WAAYK,EAAEL,gBAQlG,OACI,iBAAKlD,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,uBACA,gBAAKD,UAAWC,EAAhB,UACI,SAACuD,GAAD,CAAqB/C,SARf,SAACgD,GACfzE,EAAM0E,QAAQD,EAAOE,mBASjB,yBACKP,UAWXQ,IAAcC,EAAAA,GAAAA,GAAiB,IAuB/BL,IAAsBpD,EAAAA,EAAAA,GAA+B,CAACC,KAAM,yBAAtCD,EApBtB,SAACpB,GAEH,OACI,kBAAMyB,SAAUzB,EAAMsB,aAAtB,WACI,0BACI,SAACwD,GAAA,EAAD,CAAO9D,UAAWC,EACX8D,UAAWhD,EAAAA,GAAU0B,KAAK,cAC1BuB,YAAa,eACbC,SAAU,CAACC,GAAAA,EAAUN,SAGhC,0BACI,SAAClD,EAAA,EAAD,CAAQC,KAAM,SACNX,UAAWC,EADnB,0BAWhB,M,UC3BakE,IAAmBC,EAAAA,GAAAA,KAlBR,SAACvF,GACrB,MAAO,CACHwE,MAAOxE,EAAMwF,YAAYhB,UAIN,SAACiB,GACxB,MAAO,CACHZ,QAAS,SAACC,GACNW,GAASC,EAAAA,EAAAA,IAAUZ,QASCS,CACMjB,IC/BzBqB,GAAsC,SAAC,GAOO,IANHjE,EAME,EANFA,QACAtB,EAKE,EALFA,QACAF,EAIE,EAJFA,OACAM,EAGE,EAHFA,aACA0C,EAEE,EAFFA,UACAC,EACE,EADFA,YAEpD,OACI,4BACI,SAAC,EAAD,CAAazB,QAASA,EACTtB,QAASA,EACTF,OAAQA,EACRM,aAAcA,EACd0C,UAAWA,EACXC,YAAaA,KAE1B,SAACmC,GAAD,CAAkBlF,QAASA,EACTwF,WAAU,OAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAS8B,OAAOqC,Y,sBCkBpDC,GAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WA0CD,OA1CCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MACF,WACI,IAAIC,EAAwBC,OAAOjF,KAAKZ,MAAM8F,MAAMC,OAAOH,QACtDA,IACDA,EAAShF,KAAKZ,MAAMgG,mBAEhBpF,KAAKZ,MAAMiG,QAAQC,KAAK,UAGV,kBAAXN,IACPhF,KAAKZ,MAAMmG,eAAeP,GAC1BhF,KAAKZ,MAAMoG,UAAUR,MAE5B,+BAED,WACIhF,KAAKyF,mBACR,gCAED,SAAmB3F,EAAuCC,GAClDC,KAAKZ,MAAM8F,MAAMC,OAAOH,SAAWlF,EAAUoF,MAAMC,OAAOH,QAC1DhF,KAAKyF,mBAEZ,oBAED,WACI,OACI,SAACb,IAAD,kBAAa5E,KAAKZ,OAAlB,IACSuB,QAASX,KAAKZ,MAAMuB,QACpBtB,aAEuCqG,IAAnC1F,KAAKZ,MAAM8F,MAAMC,OAAOH,SAGhBhF,KAAKZ,MAAM8F,MAAMC,OAAOH,SAAYhF,KAAKZ,MAAMuG,YAE3DxG,OAAQa,KAAKZ,MAAMD,OACnBM,aAAcO,KAAKZ,MAAMK,aACzB0C,UAAWnC,KAAKZ,MAAM+C,UACtBC,YAAapC,KAAKZ,MAAMgD,mBAGxC,EA1CC2C,CAAyBxE,EAAAA,WAsD/B,IAAeqF,EAAAA,GAAAA,KACXpB,EAAAA,GAAAA,KAVkB,SAACvF,GAAD,MAAgD,CAClE0B,QAAS1B,EAAMwF,YAAY9D,QAC3BtB,QAASJ,EAAMwF,YAAYpF,QAC3BsG,YAAa1G,EAAM4G,KAAKb,OACxB7F,OAAQF,EAAMwF,YAAYtF,OAC1BiG,iBAAkBnG,EAAM4G,KAAKb,OAC7Bc,OAAQ7G,EAAM4G,KAAKC,UAKD,CAACP,eAAAA,EAAAA,GAAgBC,UAAAA,EAAAA,GAAW/F,aAAAA,EAAAA,GAAc0C,UAAAA,EAAAA,GAAWC,YAAAA,EAAAA,KACvE2D,GAAAA,GAHJ,CAIEhB,K,2MCzFIiB,EAA+C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAAStF,EAAsB,EAAtBA,MAAQuF,EAAc,EAAdA,SACrEC,EAAWF,GAAWtF,EAC5B,OACI,iBAAKR,UAAWgG,EAAWC,EAAAA,EAAAA,iBAA0B,GAArD,WACI,yBACKF,KAEL,yBACKC,IAAY,0BAAOxF,UAMvBO,EAAyC,SAAC/B,GACnD,IAAOkH,EAA6BlH,EAA7BkH,MAAgBC,GAAanH,EAAtB6G,MAAd,OAAoC7G,EAApC,IAEA,OAAO,SAAC4G,GAAD,kBAAiB5G,GAAjB,cAAwB,uCAAckH,GAAWC,QAG/CrF,EAAsC,SAAC9B,GAChD,IAAOkH,EAA6BlH,EAA7BkH,MAAgBC,GAAanH,EAAtB6G,MAAd,OAAoC7G,EAApC,IAEA,OAAO,SAAC4G,GAAD,kBAAiB5G,GAAjB,cAAwB,oCAAWkH,GAAWC,QAG5CtF,EAAc,eAACmD,EAAD,uDAAuB,GAAIvB,EAA3B,uCAAyC2D,EAAzC,uCAAiErC,EAAjE,uCAAiF/E,EAAjF,uDAAyF,GAAIqH,EAA7F,uDAA4G,GAAIC,EAAhH,uCAAmIC,EAAnI,8CACvB,iBAAKvG,UAAWsG,EAAhB,WACI,SAAC,KAAD,gBAAOtC,YAAaA,EACbvB,KAAMA,EACNwB,SAAUmC,EACVrC,UAAWA,GACP/E,GAJX,IAKOgB,UAAWuG,KAEjBF,O,4EC7CF,IAAMnC,EAAW,SAACzE,GACrB,IAAIA,EACJ,MAAO,qBAGEoE,EAAmB,SAAC2C,GAAD,OAAuB,SAAC/G,GACpD,GAAIA,EAAMoD,OAAS2D,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCLlC,KAAgB,iBAAmB,wCAAwC,iBAAmB,0C,iECG/E,SAASC,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKjC,KAAK+B,EAAGxH,QAETkH,GAAKQ,EAAKtE,SAAW8D,GAH4BS,GAAK,IAK5D,MAAOK,GACPJ,GAAK,EACLH,EAAKO,EACL,QACA,IACOL,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBT,EAAKC,KAAM,EAAAe,EAAA,GAA2BhB,EAAKC,IGLjF,WACb,MAAM,IAAIgB,UAAU,6IHIgF","sources":["webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?c3a9","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ProfileInfo_button__E5T-5\",\"userInfoSection\":\"ProfileInfo_userInfoSection__3Z9OI\",\"editModeContainer\":\"ProfileInfo_editModeContainer__s+QLK\",\"editFormContainer\":\"ProfileInfo_editFormContainer__6eS5d\",\"editModeContacts\":\"ProfileInfo_editModeContacts__rU7ld\",\"editModeInput\":\"ProfileInfo_editModeInput__bpTLu\",\"userDescription\":\"ProfileInfo_userDescription__9Y4-J\",\"userName\":\"ProfileInfo_userName__D6-rQ\",\"userInfoText\":\"ProfileInfo_userInfoText__dMC92\",\"flexContainer\":\"ProfileInfo_flexContainer__Sqzbl\",\"contactsSection\":\"ProfileInfo_contactsSection__XR-tN\",\"contactText\":\"ProfileInfo_contactText__jQCk4\",\"userAvatarSection\":\"ProfileInfo_userAvatarSection__GV+rs\",\"userAvatar\":\"ProfileInfo_userAvatar__s15xl\",\"inputFileButtonContainer\":\"ProfileInfo_inputFileButtonContainer__aayJz\",\"inputFile\":\"ProfileInfo_inputFile__4g0YU\",\"statusContainer\":\"ProfileInfo_statusContainer__cGy3u\",\"backgroundImage\":\"ProfileInfo_backgroundImage__QFUCN\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__eG8tH\",\"editStatus\":\"ProfileStatus_editStatus__jlLeK\"};","import React, {ChangeEvent} from 'react';\r\nimport s from './ProfileStatus.module.css'\r\n\r\ntype MapDispatchToPropsType = {\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport type ProfileStatusPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\ntype StateType = { editMode: boolean, status: string, isOwner: boolean };\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusPropsType, StateType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status,\r\n        isOwner: this.props.isOwner\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>) {\r\n\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {!this.state.editMode ?\r\n                <div>\r\n                    <span className={s.status}\r\n                          onClick={this.activateEditMode}>{this.props.status || 'Status is not set'}\r\n                    </span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input autoFocus\r\n                           onChange={this.onStatusChange}\r\n                           onBlur={this.deactivateEditMode}\r\n                           value={this.state.status}\r\n                           className={s.editStatus}\r\n                    >\r\n                    </input>\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\n","import React, { ComponentType } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport inputErrorStyle from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\n\r\nexport type ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: ComponentType<ProfileDataFormPropsType & InjectedFormProps<ProfileType, ProfileDataFormPropsType, string>> =\r\n    ({handleSubmit, profile, error}) => {\r\n        return <form onSubmit={handleSubmit} className={s.editFormContainer}>\r\n            <div>\r\n                <div>\r\n                    <Button type={\"submit\"} className={s.button}>\r\n                        Save info\r\n                    </Button>\r\n                </div>\r\n                {error && <div className={inputErrorStyle.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n                <div className={s.userInfoText}>\r\n                    <span className={s.userInfoText}>Full name: </span>\r\n                    {createField(\"Full name\", \"fullName\", [], Input, {}, \"\", \"\", s.editModeInput)}\r\n                </div>\r\n                <div className={s.flexContainer}>\r\n                    <span className={s.userInfoText}>Looking for a job: </span>\r\n                    <div className={s.editModeInput}>\r\n                        {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"}, \"\", \"\", \"\")}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <span className={s.userInfoText}>Skills: </span>\r\n                    {createField(\"Skills\", \"lookingForAJobDescription\", [], Textarea, {}, \"\", \"\", s.editModeInput)}\r\n                </div>\r\n                <div>\r\n                    <span className={s.userInfoText}>About me: </span>\r\n                    {createField(\"About me\", \"aboutMe\", [], Textarea, {}, \"\", \"\", s.editModeInput)}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span className={s.editModeContacts}>Contacts</span>\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key}>\r\n                        {<span className={s.userInfoText}>{key}</span>}: {createField(key, `contacts.${key}`, [], Input, {}, \"\", \"\", s.editModeInput)}\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </form>\r\n    }\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>\r\n({form: \"edit-profile\"})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React from \"react\";\r\nimport s from \"../ProfileInfo/ProfileInfo.module.css\";\r\nimport Button from '../../common/Button/Button';\r\nimport {ProfileContacts, ProfileType} from '../../../redux/profile-reducer';\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contactText}>\r\n        {contactTitle}: {contactValue}\r\n    </div>\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    enableEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, enableEditMode}) => {\r\n    return <div className={s.userDescription}>\r\n        {isOwner && <div>\r\n            <Button onClick={enableEditMode} className={s.button}>\r\n                Edit info\r\n            </Button>\r\n        </div>}\r\n        <div className={s.userName}>{profile.fullName ? profile.fullName : \"information is absent\"}</div>\r\n        <div className={s.userInfoText}>Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n        {profile.lookingForAJobDescription &&\r\n            <div className={s.userInfoText}>Skills: {profile.lookingForAJobDescription}</div>}\r\n        {profile.aboutMe && <div className={s.userInfoText}>About me: {profile.aboutMe}</div>}\r\n        {\r\n            !Object.keys(profile.contacts).map(key => {return profile.contacts[key as keyof ProfileContacts]})\r\n                .every(el => el === null) &&\r\n            <div>\r\n                <span className={s.contactsSection}>Contacts: </span>\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return profile.contacts[key as keyof ProfileContacts]\r\n                        ? <Contact key={key}\r\n                                   contactTitle={key}\r\n                                   contactValue={profile.contacts[key as keyof ProfileContacts]}/>\r\n                        : null\r\n                })}\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default ProfileData;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from '../../common/preloader/Preloader';\r\nimport AnonymousUserPhoto from '../../../assets/images/user.png'\r\nimport {ProfileStatus} from './ProfileStatus/ProfileStatus';\r\nimport ProfileDataFormReduxForm from './ProfileDataForm';\r\nimport ProfileData from '../ProfileData/ProfileData';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    isOwner: boolean\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profile: ProfileType) => any\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                                profile,\r\n                                                                isOwner,\r\n                                                                status,\r\n                                                                updateStatus,\r\n                                                                savePhoto,\r\n                                                                saveProfile,\r\n                                                            }) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length === 1) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (profile: ProfileType) => {\r\n        saveProfile(profile)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.userInfoSection}>\r\n                <div className={s.userAvatarSection}>\r\n                    <img\r\n                        className={s.userAvatar}\r\n                        src={profile.photos.large || AnonymousUserPhoto}\r\n                        alt={profile.fullName + \" user avatar\"}\r\n                    />\r\n                    {\r\n                        isOwner &&\r\n                        <div className={s.inputFileButtonContainer}>\r\n                            <input type=\"file\"\r\n                                   name=\"file\"\r\n                                   id=\"file\"\r\n                                   className={s.inputFile}\r\n                                   onChange={onMainPhotoSelected}/>\r\n                            <label htmlFor=\"file\">Change avatar</label>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div className={s.editModeContainer}>\r\n                    <div className={s.statusContainer}>\r\n                        <ProfileStatus status={status}\r\n                                       updateStatus={updateStatus}\r\n                                       isOwner={isOwner}\r\n                        />\r\n                    </div>\r\n                    {editMode\r\n                        ? <ProfileDataFormReduxForm onSubmit={onSubmit}\r\n                                                    profile={profile}\r\n                                                    initialValues={profile}\r\n                        />\r\n                        : <ProfileData profile={profile}\r\n                                       isOwner={isOwner}\r\n                                       enableEditMode={() => setEditMode(true)}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPostsSection\":\"MyPosts_myPostsSection__lI5dB\",\"myPostsTitle\":\"MyPosts_myPostsTitle__+s3ZS\",\"newPostSection\":\"MyPosts_newPostSection__KXIeJ\",\"newPostCreateField\":\"MyPosts_newPostCreateField__HTbSy\",\"sendPostBtn\":\"MyPosts_sendPostBtn__A609R\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__jQ6al\",\"avatar\":\"Post_avatar__x-pWM\",\"textBlock\":\"Post_textBlock__quwNQ\",\"userMessage\":\"Post_userMessage__V10ie\",\"likesWrapper\":\"Post_likesWrapper__ZW420\",\"likesCount\":\"Post_likesCount__IQzHH\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport AnonymousUserPhoto from '../../../../assets/images/user.png';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.avatar}>\r\n                <img src={AnonymousUserPhoto}\r\n                     alt=\"user avatar\"/>\r\n            </div>\r\n            <div className={s.textBlock}>\r\n                <p className={s.userMessage}>{props.message}</p>\r\n                <div className={s.likesWrapper}>\r\n                    <span>likes: <span className={s.likesCount}>{props.likesCount}</span></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\nimport Button from '../../common/Button/Button';\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    const postsElements = [...props.posts].reverse().map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    // let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const onAddPost = (values: FormDataNewPostType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostsSection}>\r\n            <h3 className={s.myPostsTitle}>My posts</h3>\r\n            <div className={s.newPostSection}>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            </div>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport type FormDataNewPostType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataNewPostType>>\r\n    = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field className={s.newPostCreateField}\r\n                       component={Textarea} name=\"newPostText\"\r\n                       placeholder={'Post message'}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button type={'submit'}\r\n                        className={s.sendPostBtn}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddNewPostFormRedux = reduxForm<FormDataNewPostType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\nexport default MyPosts\r\n\r\n","import React from 'react';\r\nimport {addPostAC, PostsType} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport {Dispatch} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from '../../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostsType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\nexport type MyPostsCommonPropsType = {\r\n    isOwner: boolean,\r\n    userAvatar: string | null | undefined,\r\n}\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, MyPostsCommonPropsType, RootStateType>\r\n(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileContainer';\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = ({\r\n                                                        profile,\r\n                                                        isOwner,\r\n                                                        status,\r\n                                                        updateStatus,\r\n                                                        savePhoto,\r\n                                                        saveProfile\r\n                                                    }) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         isOwner={isOwner}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         savePhoto={savePhoto}\r\n                         saveProfile={saveProfile}\r\n            />\r\n            <MyPostsContainer isOwner={isOwner}\r\n                              userAvatar={profile?.photos.small}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile,\r\n} from '../../redux/profile-reducer';\r\nimport {RootStateType} from '../../redux/redux-store';\r\nimport {compose} from 'redux';\r\n\r\ntype MapStateToPropsType = {\r\n    profile: null | ProfileType\r\n    isOwner: boolean\r\n    currentUser: any\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profile: ProfileType) => any\r\n}\r\n\r\ntype MatchParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type ProfilePropsType =\r\n    RouteComponentProps<MatchParamsType>\r\n    & MapStateToPropsType\r\n    & MapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        if (typeof userId === 'number') {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     isOwner={\r\n                         // if profile id is missing in the address bar\r\n                         this.props.match.params.userId === undefined\r\n                             ? true\r\n                             // else compare current user id with authenticated user id\r\n                             : +(this.props.match.params.userId) === this.props.currentUser\r\n                     }\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    isOwner: state.profilePage.isOwner,\r\n    currentUser: state.auth.userId,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>\r\n    (mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer);","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldsProps} from 'redux-form';\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field';\r\n\r\n\r\ntype FormsControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={hasError ? styles.formControlError : ''}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    // @ts-ignore\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    // @ts-ignore\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string = '', name: string, validators: Array<any>, component: any, props = {}, text: string = '', wrapperClass: any, fieldClass: any) => (\r\n    <div className={wrapperClass}>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n               className={fieldClass}\r\n        />\r\n        {text}\r\n    </div>\r\n)","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControlError\":\"FormsControls_formControlError__qwwm7\",\"formSummaryError\":\"FormsControls_formSummaryError__vFhQG\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatus","state","editMode","status","props","isOwner","activateEditMode","setState","deactivateEditMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","this","autoFocus","onChange","onBlur","className","s","onClick","React","reduxForm","form","handleSubmit","profile","error","onSubmit","Button","type","inputErrorStyle","createField","Input","Textarea","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","enableEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","every","el","savePhoto","saveProfile","useState","setEditMode","Preloader","src","photos","large","AnonymousUserPhoto","alt","name","id","target","files","length","htmlFor","then","initialValues","message","likesCount","MyPosts","postsElements","posts","reverse","p","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","placeholder","validate","required","MyPostsContainer","connect","profilePage","dispatch","addPostAC","Profile","userAvatar","small","ProfileContainer","userId","Number","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","undefined","currentUser","compose","auth","isAuth","withRouter","FormControl","meta","touched","children","hasError","styles","input","restProps","validators","text","wrapperClass","fieldClass","maxLength","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}
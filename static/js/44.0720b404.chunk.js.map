{"version":3,"file":"static/js/44.0720b404.chunk.js","mappings":"iPACA,EAA4B,yBAA5B,EAAqE,6BAArE,EAAyG,oBAAzG,EAA6I,6BAA7I,EAAkL,qBAAlL,EAA+M,qBAA/M,EAA0Q,sB,mBC+CpQA,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,EAtBsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAEzE,OACI,kBAAMC,SAAUF,EACVG,UAAWC,EADjB,WAGKC,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,GAAO,GAAI,GAAIH,EAASA,IAClEC,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,YAAa,GAAIJ,EAASA,IACxFC,EAAAA,EAAAA,IAAY,WAAY,aAAc,GAAIE,EAAAA,GAAO,CAACC,KAAM,YAAa,cAAeJ,EAAS,IAE7FH,IAAS,gBAAKE,UAAWM,EAAAA,EAAAA,iBAAhB,SACLR,KAEL,gBAAKE,UAAWC,EAAhB,UACI,SAACM,EAAA,EAAD,CAAQF,KAAM,SAAUL,UAAWC,EAAnC,4BAmChB,GAAeO,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAA8C,CAClEC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,MAAAA,EAAAA,IAAzC,EAzBc,SAACC,GAIX,OAAIA,EAAMH,QACC,SAAC,KAAD,CAAUI,GAAI,cAGlB,iBAAKd,UAAWC,EAAhB,WACH,iBAAKD,UAAWC,EAAhB,WACI,eAAGD,UAAWC,EAAd,uCAA+C,cAC3Cc,KAAK,wCACLC,OAAO,SAFoC,sBAG/C,cAAGhB,UAAWC,EAAd,sDACA,cAAGD,UAAWC,EAAd,wCACA,cAAGD,UAAWC,EAAd,gCAEJ,SAACP,EAAD,CAAgBK,SAhBH,SAACkB,GACdJ,EAAMD,MAAMK,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,2MC1C1DC,EAA+C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASzB,EAAsB,EAAtBA,MAAQ0B,EAAc,EAAdA,SACrEC,EAAWF,GAAWzB,EAC5B,OACI,iBAAKE,UAAWyB,EAAWnB,EAAAA,EAAAA,iBAA0B,GAArD,WACI,yBACKkB,KAEL,yBACKC,IAAY,0BAAO3B,UAMvB4B,EAAyC,SAACb,GACnD,IAAOc,EAA6Bd,EAA7Bc,MAAgBC,GAAaf,EAAtBS,MAAd,OAAoCT,EAApC,IAEA,OAAO,SAACQ,GAAD,kBAAiBR,GAAjB,cAAwB,uCAAcc,GAAWC,QAG/CxB,EAAsC,SAACS,GAChD,IAAOc,EAA6Bd,EAA7Bc,MAAgBC,GAAaf,EAAtBS,MAAd,OAAoCT,EAApC,IAEA,OAAO,SAACQ,GAAD,kBAAiBR,GAAjB,cAAwB,oCAAWc,GAAWC,QAG5C1B,EAAc,eAAC2B,EAAD,uDAAuB,GAAIC,EAA3B,uCAAyCC,EAAzC,uCAAiEC,EAAjE,uCAAiFnB,EAAjF,uDAAyF,GAAIoB,EAA7F,uDAA4G,GAAIC,EAAhH,uCAAmIC,EAAnI,8CACvB,iBAAKnC,UAAWkC,EAAhB,WACI,SAAC,KAAD,gBAAOL,YAAaA,EACbC,KAAMA,EACNM,SAAUL,EACVC,UAAWA,GACPnB,GAJX,IAKOb,UAAWmC,KAEjBF,O,4EC7CF,IAAM9B,EAAW,SAACkC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCLlC,KAAgB,iBAAmB,wCAAwC,iBAAmB","sources":["webpack://social-network/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login_container__j-75l\",\"textContainer\":\"Login_textContainer__9toaW\",\"text\":\"Login_text__YhDgY\",\"formContainer\":\"Login_formContainer__JibLb\",\"field\":\"Login_field__suMGH\",\"input\":\"Login_input__V-T1g\",\"error\":\"Login_error__jA0EE\",\"button\":\"Login_button__5pUEY\"};","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {RootStateType} from '../../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport styles from './../common/FormsControls/FormsControls.module.css'\r\nimport s from './Login.module.css'\r\nimport Button from '../common/Button/Button';\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\nexport type LoginPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}\r\n              className={s.formContainer}\r\n        >\r\n            {createField('Email', 'email', [required], Input, {}, '', s.field, s.input)}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'}, '', s.field, s.input)}\r\n            {createField('Password', 'rememberMe', [], Input, {type: 'checkbox'}, 'Remember me', s.field, '')}\r\n\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div className={s.field}>\r\n                <Button type={'submit'} className={s.button}>\r\n                    Submit\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div className={s.container}>\r\n        <div className={s.textContainer}>\r\n            <p className={s.text}>To log in get registered <a\r\n                href=\"https://social-network.samuraijs.com/\"\r\n                target=\"_blank\">here</a></p>\r\n            <p className={s.text}>Or use common test account credentials:</p>\r\n            <p className={s.text}>Email: free@samuraijs.com</p>\r\n            <p className={s.text}>Password: free</p>\r\n        </div>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldsProps} from 'redux-form';\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field';\r\n\r\n\r\ntype FormsControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={hasError ? styles.formControlError : ''}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    // @ts-ignore\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldsProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    // @ts-ignore\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string = '', name: string, validators: Array<any>, component: any, props = {}, text: string = '', wrapperClass: any, fieldClass: any) => (\r\n    <div className={wrapperClass}>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n               className={fieldClass}\r\n        />\r\n        {text}\r\n    </div>\r\n)","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControlError\":\"FormsControls_formControlError__qwwm7\",\"formSummaryError\":\"FormsControls_formSummaryError__vFhQG\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","className","s","createField","required","Input","type","styles","Button","connect","state","isAuth","auth","login","props","to","href","target","formData","email","password","rememberMe","FormControl","meta","touched","children","hasError","Textarea","input","restProps","placeholder","name","validators","component","text","wrapperClass","fieldClass","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}